# coding: utf-8

"""
    Gpdviz REST API

    The Gpdviz REST API deals with three main kinds of resources: sensor systems, data streams, and observations.

    OpenAPI spec version: 0.4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SensorSystemApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_system(self, sysid, **kwargs):
        """
        Unregister a sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_system(sysid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :return: SensorSystemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_system_with_http_info(sysid, **kwargs)
        else:
            (data) = self.delete_system_with_http_info(sysid, **kwargs)
            return data

    def delete_system_with_http_info(self, sysid, **kwargs):
        """
        Unregister a sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_system_with_http_info(sysid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :return: SensorSystemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sysid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sysid' is set
        if ('sysid' not in params) or (params['sysid'] is None):
            raise ValueError("Missing the required parameter `sysid` when calling `delete_system`")


        collection_formats = {}

        path_params = {}
        if 'sysid' in params:
            path_params['sysid'] = params['sysid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ss/{sysid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SensorSystemSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_system(self, sysid, **kwargs):
        """
        Get a sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system(sysid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :return: SensorSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_system_with_http_info(sysid, **kwargs)
        else:
            (data) = self.get_system_with_http_info(sysid, **kwargs)
            return data

    def get_system_with_http_info(self, sysid, **kwargs):
        """
        Get a sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system_with_http_info(sysid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :return: SensorSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sysid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sysid' is set
        if ('sysid' not in params) or (params['sysid'] is None):
            raise ValueError("Missing the required parameter `sysid` when calling `get_system`")


        collection_formats = {}

        path_params = {}
        if 'sysid' in params:
            path_params['sysid'] = params['sysid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ss/{sysid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SensorSystem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_systems(self, **kwargs):
        """
        List all registered sensor systems
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_systems(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[SensorSystemSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_systems_with_http_info(**kwargs)
        else:
            (data) = self.list_systems_with_http_info(**kwargs)
            return data

    def list_systems_with_http_info(self, **kwargs):
        """
        List all registered sensor systems
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_systems_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[SensorSystemSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_systems" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ss', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[SensorSystemSummary]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def register_stream(self, sysid, body, **kwargs):
        """
        Add a data stream
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_stream(sysid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :param DataStreamAdd body: stream definition (required)
        :return: DataStreamSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.register_stream_with_http_info(sysid, body, **kwargs)
        else:
            (data) = self.register_stream_with_http_info(sysid, body, **kwargs)
            return data

    def register_stream_with_http_info(self, sysid, body, **kwargs):
        """
        Add a data stream
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_stream_with_http_info(sysid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :param DataStreamAdd body: stream definition (required)
        :return: DataStreamSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sysid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sysid' is set
        if ('sysid' not in params) or (params['sysid'] is None):
            raise ValueError("Missing the required parameter `sysid` when calling `register_stream`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_stream`")


        collection_formats = {}

        path_params = {}
        if 'sysid' in params:
            path_params['sysid'] = params['sysid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ss/{sysid}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DataStreamSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def register_system(self, body, **kwargs):
        """
        Register sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_system(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SensorSystemAdd body: sensor system definition (required)
        :return: SensorSystemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.register_system_with_http_info(body, **kwargs)
        else:
            (data) = self.register_system_with_http_info(body, **kwargs)
            return data

    def register_system_with_http_info(self, body, **kwargs):
        """
        Register sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_system_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SensorSystemAdd body: sensor system definition (required)
        :return: SensorSystemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_system`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ss', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SensorSystemSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_system(self, sysid, body, **kwargs):
        """
        Update a sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_system(sysid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :param SensorSystemUpdate body: Properties to update. All elements are optional. (required)
        :return: SensorSystemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_system_with_http_info(sysid, body, **kwargs)
        else:
            (data) = self.update_system_with_http_info(sysid, body, **kwargs)
            return data

    def update_system_with_http_info(self, sysid, body, **kwargs):
        """
        Update a sensor system
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_system_with_http_info(sysid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sysid: sensor system id (required)
        :param SensorSystemUpdate body: Properties to update. All elements are optional. (required)
        :return: SensorSystemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sysid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sysid' is set
        if ('sysid' not in params) or (params['sysid'] is None):
            raise ValueError("Missing the required parameter `sysid` when calling `update_system`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_system`")


        collection_formats = {}

        path_params = {}
        if 'sysid' in params:
            path_params['sysid'] = params['sysid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ss/{sysid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SensorSystemSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
