# coding: utf-8

"""
    Gpdviz REST API

    The Gpdviz REST API deals with three kinds of resources: sensor systems, data streams, and observations.

    OpenAPI spec version: 0.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SSUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'push_events': 'float',
        'center': 'LatLon',
        'refresh': 'float'
    }

    attribute_map = {
        'push_events': 'pushEvents',
        'center': 'center',
        'refresh': 'refresh'
    }

    def __init__(self, push_events=None, center=None, refresh=None):
        """
        SSUpdate - a model defined in Swagger
        """

        self._push_events = None
        self._center = None
        self._refresh = None

        if push_events is not None:
          self.push_events = push_events
        if center is not None:
          self.center = center
        if refresh is not None:
          self.refresh = refresh

    @property
    def push_events(self):
        """
        Gets the push_events of this SSUpdate.

        :return: The push_events of this SSUpdate.
        :rtype: float
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """
        Sets the push_events of this SSUpdate.

        :param push_events: The push_events of this SSUpdate.
        :type: float
        """

        self._push_events = push_events

    @property
    def center(self):
        """
        Gets the center of this SSUpdate.

        :return: The center of this SSUpdate.
        :rtype: LatLon
        """
        return self._center

    @center.setter
    def center(self, center):
        """
        Sets the center of this SSUpdate.

        :param center: The center of this SSUpdate.
        :type: LatLon
        """

        self._center = center

    @property
    def refresh(self):
        """
        Gets the refresh of this SSUpdate.

        :return: The refresh of this SSUpdate.
        :rtype: float
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """
        Sets the refresh of this SSUpdate.

        :param refresh: The refresh of this SSUpdate.
        :type: float
        """

        self._refresh = refresh

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SSUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
