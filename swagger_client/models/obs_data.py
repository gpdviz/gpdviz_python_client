# coding: utf-8

"""
    

     # Basic sequence  - Register a sensor system - `POST /ss` - Add one or more data streams to the sensor system - `POST /ss/{sysid}` - Add data stream observations - `POST /ss/{sysid}/{strid}/obs`        

    OpenAPI spec version: 0.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ObsData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature': 'Feature',
        'geometry': 'Geometry',
        'scalar_data': 'ScalarData'
    }

    attribute_map = {
        'feature': 'feature',
        'geometry': 'geometry',
        'scalar_data': 'scalarData'
    }

    def __init__(self, feature=None, geometry=None, scalar_data=None):
        """
        ObsData - a model defined in Swagger
        """

        self._feature = None
        self._geometry = None
        self._scalar_data = None

        if feature is not None:
          self.feature = feature
        if geometry is not None:
          self.geometry = geometry
        if scalar_data is not None:
          self.scalar_data = scalar_data

    @property
    def feature(self):
        """
        Gets the feature of this ObsData.

        :return: The feature of this ObsData.
        :rtype: Feature
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """
        Sets the feature of this ObsData.

        :param feature: The feature of this ObsData.
        :type: Feature
        """

        self._feature = feature

    @property
    def geometry(self):
        """
        Gets the geometry of this ObsData.

        :return: The geometry of this ObsData.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """
        Sets the geometry of this ObsData.

        :param geometry: The geometry of this ObsData.
        :type: Geometry
        """

        self._geometry = geometry

    @property
    def scalar_data(self):
        """
        Gets the scalar_data of this ObsData.

        :return: The scalar_data of this ObsData.
        :rtype: ScalarData
        """
        return self._scalar_data

    @scalar_data.setter
    def scalar_data(self, scalar_data):
        """
        Sets the scalar_data of this ObsData.

        :param scalar_data: The scalar_data of this ObsData.
        :type: ScalarData
        """

        self._scalar_data = scalar_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ObsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
