# coding: utf-8

"""
    

     # Basic sequence  - Register a sensor system - `POST /ss` - Add one or more data streams to the sensor system - `POST /ss/{sysid}` - Add data stream observations - `POST /ss/{sysid}/{strid}/obs`        

    OpenAPI spec version: 0.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StreamRegister(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strid': 'str',
        'name': 'str',
        'description': 'str',
        'map_style': 'JsObject',
        'z_order': 'float',
        'variables': 'list[VariableDef]',
        'chart_style': 'JsObject'
    }

    attribute_map = {
        'strid': 'strid',
        'name': 'name',
        'description': 'description',
        'map_style': 'mapStyle',
        'z_order': 'zOrder',
        'variables': 'variables',
        'chart_style': 'chartStyle'
    }

    def __init__(self, strid=None, name=None, description=None, map_style=None, z_order=None, variables=None, chart_style=None):
        """
        StreamRegister - a model defined in Swagger
        """

        self._strid = None
        self._name = None
        self._description = None
        self._map_style = None
        self._z_order = None
        self._variables = None
        self._chart_style = None

        self.strid = strid
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if map_style is not None:
          self.map_style = map_style
        if z_order is not None:
          self.z_order = z_order
        if variables is not None:
          self.variables = variables
        if chart_style is not None:
          self.chart_style = chart_style

    @property
    def strid(self):
        """
        Gets the strid of this StreamRegister.

        :return: The strid of this StreamRegister.
        :rtype: str
        """
        return self._strid

    @strid.setter
    def strid(self, strid):
        """
        Sets the strid of this StreamRegister.

        :param strid: The strid of this StreamRegister.
        :type: str
        """
        if strid is None:
            raise ValueError("Invalid value for `strid`, must not be `None`")

        self._strid = strid

    @property
    def name(self):
        """
        Gets the name of this StreamRegister.

        :return: The name of this StreamRegister.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StreamRegister.

        :param name: The name of this StreamRegister.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this StreamRegister.

        :return: The description of this StreamRegister.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StreamRegister.

        :param description: The description of this StreamRegister.
        :type: str
        """

        self._description = description

    @property
    def map_style(self):
        """
        Gets the map_style of this StreamRegister.

        :return: The map_style of this StreamRegister.
        :rtype: JsObject
        """
        return self._map_style

    @map_style.setter
    def map_style(self, map_style):
        """
        Sets the map_style of this StreamRegister.

        :param map_style: The map_style of this StreamRegister.
        :type: JsObject
        """

        self._map_style = map_style

    @property
    def z_order(self):
        """
        Gets the z_order of this StreamRegister.

        :return: The z_order of this StreamRegister.
        :rtype: float
        """
        return self._z_order

    @z_order.setter
    def z_order(self, z_order):
        """
        Sets the z_order of this StreamRegister.

        :param z_order: The z_order of this StreamRegister.
        :type: float
        """

        self._z_order = z_order

    @property
    def variables(self):
        """
        Gets the variables of this StreamRegister.

        :return: The variables of this StreamRegister.
        :rtype: list[VariableDef]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """
        Sets the variables of this StreamRegister.

        :param variables: The variables of this StreamRegister.
        :type: list[VariableDef]
        """

        self._variables = variables

    @property
    def chart_style(self):
        """
        Gets the chart_style of this StreamRegister.

        :return: The chart_style of this StreamRegister.
        :rtype: JsObject
        """
        return self._chart_style

    @chart_style.setter
    def chart_style(self, chart_style):
        """
        Sets the chart_style of this StreamRegister.

        :param chart_style: The chart_style of this StreamRegister.
        :type: JsObject
        """

        self._chart_style = chart_style

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StreamRegister):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
