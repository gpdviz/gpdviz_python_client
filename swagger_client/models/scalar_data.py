# coding: utf-8

"""
    

     # Basic sequence  - Register a sensor system - `POST /ss` - Add one or more data streams to the sensor system - `POST /ss/{sysid}` - Add data stream observations - `POST /ss/{sysid}/{strid}/obs`        

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ScalarData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vars': 'list[str]',
        'vals': 'list[float]',
        'position': 'LatLon'
    }

    attribute_map = {
        'vars': 'vars',
        'vals': 'vals',
        'position': 'position'
    }

    def __init__(self, vars=None, vals=None, position=None):
        """
        ScalarData - a model defined in Swagger
        """

        self._vars = None
        self._vals = None
        self._position = None

        self.vars = vars
        self.vals = vals
        if position is not None:
          self.position = position

    @property
    def vars(self):
        """
        Gets the vars of this ScalarData.

        :return: The vars of this ScalarData.
        :rtype: list[str]
        """
        return self._vars

    @vars.setter
    def vars(self, vars):
        """
        Sets the vars of this ScalarData.

        :param vars: The vars of this ScalarData.
        :type: list[str]
        """
        if vars is None:
            raise ValueError("Invalid value for `vars`, must not be `None`")

        self._vars = vars

    @property
    def vals(self):
        """
        Gets the vals of this ScalarData.

        :return: The vals of this ScalarData.
        :rtype: list[float]
        """
        return self._vals

    @vals.setter
    def vals(self, vals):
        """
        Sets the vals of this ScalarData.

        :param vals: The vals of this ScalarData.
        :type: list[float]
        """
        if vals is None:
            raise ValueError("Invalid value for `vals`, must not be `None`")

        self._vals = vals

    @property
    def position(self):
        """
        Gets the position of this ScalarData.

        :return: The position of this ScalarData.
        :rtype: LatLon
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this ScalarData.

        :param position: The position of this ScalarData.
        :type: LatLon
        """

        self._position = position

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScalarData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
